// Grammar
// =======
// This parser is hand written, and the grammar
// only  exists to hold  my hand as i write it.
// Since the  parser is not generated  from the
// grammar,  there is no  guarantee  that it is
// 100% correct, or even complete.

root
    : statement*
    ;

statement
    : 'use' '<' LIBRARY '>' ('as' ID) '.'
    | 'use' PATH ('as' ID) '.'
    | let
    | funcdef
    | expression '.'
    ;

symblist
    : ID (',' ID)*
    ;

exprlist
    : expression (',' expression)*
    ;

funcdef
    : 'func' ID '(' [symblist] ')' ':' expression '.'
    ;

ifelse
    : 'if' expression ':' expression 'else' ':' expression
    ;

compound_expression
    : !!!
    ;

// Prescedence expressions, left factored.

par_expression
    : '(' expression ')'
    ;

atom
    : LITERAL
    | ID
    | par_expression
    ;

primary
    : atom trailer*
    ;

trailer
    : '[' exprlist ']'
    | '(' exprlist ')'
    | '.' ID
    ;

power
    : primary ['^' unary]
    ;

factor
    : power
    | '-' factor
    ;

term
    : factor (('*'|'/'|'mod') factor)*
    ;

arith_expr
    : term (('+'|'-') term)*
    ;

comparison
    : arith_expr (comp_op add_expr)*
    ;

not_expr
    : comparison
    | 'not' not_expr
    ;
    
and_expr
    : not_expr ('and' not_expr)*
    ;

or_expr
    : and_expr (('or'|'xor') and_expr)*
    ;

expression
    : or_expr
    | compound_expression
    ;
